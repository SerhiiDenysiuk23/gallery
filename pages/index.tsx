import Head from "next/head";
import {useCallback, useEffect, useRef, useState} from "react";
import Header from "@/pages/components/Header";
import Slide from "@/pages/components/Slide";
import React from "react";
import throttle from "@/services/throttle";
import {navEvent} from "@/services/navEvents";


export default function Home() {
  const [fileList, setFileList] = useState<string[][][]>([])
  const [isVideoLoaded, setIsVideoLoaded] = useState(false)
  const [loadedData, setLoadedData] = useState(0)
  const sectionRefs = useRef<(HTMLDivElement | null)[]>([]);
  const [timerNum, setTimerNum] = useState(19)
  let startY: number


  useEffect(() => {
    fetch("/api/getPublicList").then(res => res.json()).then(res => {
      if (!res.files)
        return

      const arr: string[][][] = []
      for (let i = 0; i < res.files.length; i += 5) {
        let chunk = res.files.slice(i, i + 5);
        arr.push(chunk)
      }
      setFileList(arr)
    })
  }, []);


  // Nav Events
  const preventDefault = useCallback((e: WheelEvent | KeyboardEvent) => {
    if (e instanceof WheelEvent || (e instanceof KeyboardEvent && ['ArrowUp', 'ArrowDown'].includes(e.key))) {
      e.preventDefault();
    }
  }, []);

  const handleTouchStart = useCallback((e: TouchEvent) => {
    startY = e.touches[0].clientY;
  }, []);

  const handleTouchMove = useCallback(throttle((e: TouchEvent) => {
    navEvent(e, sectionRefs, startY)
  }, 1000), []);

  const handleWheel = useCallback(throttle((e: WheelEvent) => {
    navEvent(e, sectionRefs)
  }, 1500), []);

  const handleKeyDown = useCallback(throttle((e: KeyboardEvent) => {
    navEvent(e, sectionRefs)
  }, 500), []);


  useEffect(() => {
    if (timerNum > 0) {
      window.addEventListener('wheel', preventDefault, {passive: false});
      window.addEventListener('keydown', preventDefault, {passive: false});
      return () => {
        window.removeEventListener('wheel', preventDefault);
        window.removeEventListener('keydown', preventDefault);
      }
    }

    window.addEventListener('touchstart', handleTouchStart, {passive: false});
    window.addEventListener('touchmove', (e) => {
      e.preventDefault()
      handleTouchMove(e)
      console.log("touch")
    }, {passive: false});

    window.addEventListener('wheel', (e) => {
      e.preventDefault()
      handleWheel(e)
      console.log("wheel")
    }, {passive: false});
    window.addEventListener('keydown', (e) => {
      if (['ArrowUp', 'ArrowDown'].includes(e.key)) {
        e.preventDefault();
        handleKeyDown(e);
        console.log("arrow")
      }
    }, {passive: false});

    return () => {
      window.removeEventListener('wheel', handleWheel);
      window.removeEventListener('keydown', handleKeyDown);
      window.removeEventListener('touchstart', handleTouchStart);
      window.removeEventListener('touchmove', handleTouchMove);
    };
  }, [timerNum, preventDefault, handleTouchStart, handleTouchMove, handleWheel, handleKeyDown]);

  const handleLoadData = () => {
    setLoadedData(prevState => prevState + 1)
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      {
        timerNum > 0 &&
        <Header setTimerNum={setTimerNum} setIsVideoLoaded={setIsVideoLoaded}/>
      }
      <main>
        {fileList.map((fileGroup, groupIndex) => {
          const threshold = groupIndex * 5;
          if (fileGroup.length > 0 && isVideoLoaded && loadedData >= threshold) {
            return fileGroup.map((item, itemIndex) => {
              const refIndex = groupIndex * 5 + itemIndex;
              return (
                <React.Fragment key={item[0]}>
                  <div
                    ref={(el) => {
                      sectionRefs.current[refIndex] = el
                    }}
                    style={item.length > 1
                      ? {justifyContent: "space-between"}
                      : {justifyContent: "center"}}
                    className={`slide ${timerNum > 0 ? "hidden" : ""}`}>
                    <Slide setIsLoadData={handleLoadData} fileNames={item}/>
                  </div>
                </React.Fragment>
              );
            });
          }
          return null;
        })}
      </main>
    </>
  );
}
