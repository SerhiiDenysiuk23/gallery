import Head from "next/head";
import {useEffect, useRef, useState} from "react";
import Header from "@/pages/components/Header";
import Slide from "@/pages/components/Slide";
import React from "react";


export default function Home() {
  const [fileList, setFileList] = useState<string[][][]>([])
  const [isVideoLoaded, setIsVideoLoaded] = useState(false)
  const [loadedData, setLoadedData] = useState(0)
  const sectionRefs = useRef<(HTMLDivElement | null)[]>([]);
  const [timerNum, setTimerNum] = useState(19)

  useEffect(() => {
    fetch("/api/getPublicList").then(res => res.json()).then(res => {
      if (!res.files)
        return

      const arr: string[][][] = []
      for (let i = 0; i < res.files.length; i += 5) {
        let chunk = res.files.slice(i, i + 5);
        arr.push(chunk)
      }
      setFileList(arr)
    })
  }, []);

  useEffect(() => {
    if (timerNum > 0) {
      const preventDefault = (e: WheelEvent) => {
        e.preventDefault()
      }
      window.addEventListener('wheel', preventDefault, {passive: false});
      return () => {
        window.removeEventListener('wheel', preventDefault);
      };
    }


    const handleWheel = throttle((e: WheelEvent) => {
      const direction = e.deltaY > 0 ? 1 : -1;
      const windowHeight = window.innerHeight;
      const currentSectionIndex = sectionRefs.current.findIndex((section) => {
        if (!section) return false;
        const {top, bottom} = section.getBoundingClientRect();
        return top <= windowHeight / 2 && bottom >= windowHeight / 2;
      });
      const nextSectionIndex = currentSectionIndex + direction;
      if (nextSectionIndex >= 0 && nextSectionIndex < sectionRefs.current.length) {
        const nextSection = sectionRefs.current[nextSectionIndex];
        console.log(nextSectionIndex)
        if (nextSection) {
          window.scrollTo({
            top: window.scrollY + nextSection.getBoundingClientRect().top,
            behavior: 'smooth'
          });
        }
      }
    }, 2000);

    function throttle(func: Function, limit: number) {
      let inThrottle: boolean;
      return function (this: any, ...args: any[]) {
        const context = this;
        if (!inThrottle) {
          func.apply(context, args);
          inThrottle = true;
          setTimeout(() => inThrottle = false, limit);
        }
      };
    }

    window.addEventListener('wheel', (e) => {
      e.preventDefault()
      handleWheel(e)
    }, {passive: false});

    return () => {
      window.removeEventListener('wheel', handleWheel);
    };
  }, [timerNum]);

  const handleLoadData = () => {
    setLoadedData(prevState => prevState + 1)
  }
  // console.log(timerNum)

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      {
        timerNum > 0 &&
        <Header setTimerNum={setTimerNum} setIsVideoLoaded={setIsVideoLoaded}/>
      }
      <main>
        {fileList.map((fileGroup, groupIndex) => {
          const threshold = groupIndex * 5;
          if (fileGroup.length > 0 && isVideoLoaded && loadedData >= threshold) {
            return fileGroup.map((item, itemIndex) => {
              const refIndex = groupIndex * 5 + itemIndex;
              return (
                <React.Fragment key={item[0]}>
                  <div
                    ref={(el) => {
                      sectionRefs.current[refIndex] = el
                    }}
                    style={item.length > 1
                      ? {justifyContent: "space-between"}
                      : {justifyContent: "center"}}
                    className={`slide ${timerNum > 0 ? "hidden" : ""}`}>
                    <Slide setIsLoadData={handleLoadData} fileNames={item}/>
                  </div>
                </React.Fragment>
              );
            });
          }
          return null;
        })}
      </main>
    </>
  );
}
